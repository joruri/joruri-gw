## Joruri Gw 3.2.0 インストールマニュアル                   2015.08.03

**********************************************************************
 1 想定環境
**********************************************************************

[システム]
OS         : CentOS 7.2 (64bit)
Webサーバ  : Apache 2.4
DBシステム : MySQL 5.6
Ruby       : Ruby 2.3.1
Rails      : Rails 4.2.6
キャッシュ : memcached 1.4.20

[設定]
※IPアドレス、ドメインは一例です。ご利用の環境に応じて変更してください。
IPアドレス : 192.168.0.2
ドメイン   : 192.168.0.2

※DECOアイコンについて
  メニュー内、「DECO Drive」アイコンについては、別プロジェクトの為、
  リンクのみとなっております。

**********************************************************************
 2 CentOS のインストール
**********************************************************************

CentOSをインストールします。

インストール完了後、ご利用の環境に合わせて適切なセキュリティ設定を行ってください。
CentOSに関するセキュリティ設定については、本マニュアルの範囲外となります。

**********************************************************************
 3 事前準備
**********************************************************************

rootユーザに変更します。

  $ su -

Joruri Gw の実行に必要なパッケージをインストールします。

  # yum -y install wget make gcc-c++ git httpd httpd-devel memcached \
    libjpeg-devel libpng-devel \
    ImageMagick ImageMagick-devel curl-devel libevent libevent-devel openssl openssl-devel \
    readline-devel

MySQL5.6をインストールします。

  # yum install http://dev.mysql.com/get/mysql-community-release-el6-5.noarch.rpm
  # yum install mysql mysql-devel mysql-server mysql-utilities

Joruriユーザを作成します。

  # useradd -m joruri

Joruri Gwソースコードを設置します。

  # mkdir /var/share
  # tar xvzf v3.1.0.tar.gz -C /var/share
  # mv /var/share/joruri-gw-3.1.0 /var/share/jorurigw
  # cp /var/share/jorurigw/config/original/* /var/share/jorurigw/config/
  # chown -R joruri:joruri /var/share/jorurigw

**********************************************************************
 4 Apache の設定
**********************************************************************

Apacheの設定ファイルを編集します。

  # vi /etc/httpd/conf/httpd.conf
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  #実際のサーバのアドレスを設定します
  ServerName 192.168.0.2
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

設定ファイルにエラーがないことを確認し、Apacheを起動します。

  # /sbin/service httpd configtest
  # /sbin/service httpd start

自動起動に設定します。

  # /sbin/chkconfig httpd on

**********************************************************************
 5 MySQL の設定
**********************************************************************

MySQLの設定を行います。
文字エンコーディングの標準を UTF-8 に設定します。

  # vi /etc/my.cnf
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  [mysqld]
  character-set-server=utf8

  [client]
  default-character-set = utf8
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  ## [mysqld]に設定を追加、[client]と設定を追加。


初期設定をします。

  # mysql_install_db --user=mysql

  # service mysqld start             <- CentOS6の場合
  # systemctl start mysqld.service   <- CentOS7の場合

  # mysql_secure_installation
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  Enter current password for root (enter for none): # そのままEnter
  Set root password? [Y/n]                          # そのままEnter
  New password:                                     # rootのパスワードを*決めて*入力
  Re-enter new password:                            # 同じパスワードを再度入力
  Remove anonymous users? [Y/n]                     # そのままEnter
  Disallow root login remotely? [Y/n]               # そのままEnter
  Remove test database and access to it? [Y/n]      # そのままEnter
  Reload privilege tables now? [Y/n]                # そのままEnter
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # mysql -u root -p -e "GRANT ALL ON production_jorurigw.* TO joruri@localhost IDENTIFIED BY 'pass'"
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  Enter password:                                   # rootのパスワードを入力
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  # service mysqld stop             <- CentOS6
  # systemctl stop mysqld.service   <- CentOS7

**********************************************************************
 6 memcached の設定
**********************************************************************

memcachedを自動起動に設定します。

  # /sbin/chkconfig memcached on

memcachedを起動します。

  # /sbin/service memcached start

**********************************************************************
 7 Ruby on Rails のインストール
**********************************************************************

======================================================================
 7.1 Ruby のインストール
======================================================================

Rubyをインストールします。

  # git clone git://github.com/sstephenson/rbenv.git /usr/local/rbenv
  # git clone git://github.com/sstephenson/ruby-build.git /usr/local/rbenv/plugins/ruby-build

  # echo 'export RBENV_ROOT="/usr/local/rbenv"' >> /etc/profile.d/rbenv.sh
  # echo 'export PATH="${RBENV_ROOT}/bin:${PATH}"' >> /etc/profile.d/rbenv.sh
  # echo 'eval "$(rbenv init -)"' >> /etc/profile.d/rbenv.sh
  # source /etc/profile.d/rbenv.sh

  # rbenv install 2.3.1
  # rbenv global 2.3.1
  # rbenv rehash
  # ruby -v

  # gem update --system
  # gem install bundler

======================================================================
 7.2 Phusion Passenger のインストール
======================================================================

Phusion Passengerをインストールします。

  # gem install passenger -v 5.0.23
  # passenger-install-apache2-module -a
  # cp /var/share/jorurigw/config/samples/passenger.conf /etc/httpd/conf.d/passenger.conf

======================================================================
 7.3 gemライブラリ のインストール
======================================================================

Joruri Gw に必要なライブラリをインストールします。

  # cd /var/share/jorurigw
  # bundle install --path vendor/bundle --without development test

  ネットワーク経由でファイルのダウンロードとインストールが行われます。
  正しく完了すれば次のようなメッセージが表示されます。
    =>Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.

**********************************************************************
  8 Joruri Gw のインストール
**********************************************************************

Joruriユーザに変更します。

  # su - joruri
  $ cd /var/share/jorurigw

======================================================================
 8.1 設定ファイル
======================================================================

環境に応じて設定ファイルを編集します。

DB接続情報

  $ vi config/database.yml

LDAP接続情報

  $ vi config/ldap.yml

  ※LDAPに関する設定は、ダウンロードページより補足資料をご参照下さい。
    http://joruri.org/download/jorurigw/  【LDAP関連補足資料】LDAP_LDIF.zip

SMTP接続情報

  $ vi config/environments/production.rb

  ※連絡メモの「携帯等メール転送設定」などメール機能を利用する場合はSMTPの設定が必要です。

======================================================================
 8.2 データベースの作成
======================================================================

※作業の途中でmysqlに設定したパスワードを聞かれますのでご用意ください。

必要なデータベースを作成します。

  # service mysqld start && chkconfig mysqld on


データベースを作成します。

  $ /usr/bin/mysql -u root -p -e "create database production_jorurigw"

テーブルを作成します。

  $ su - joruri
  $ cd /var/share/jorurigw && bundle exec rake db:setup RAILS_ENV=production

初期データを登録します。

  $ cd /var/share/jorurigw && bundle exec rake db:seed:demo RAILS_ENV=production

======================================================================
 8.3 assetのコンパイル
======================================================================

assetをコンパイルします。

  $ rake assets:precompile RAILS_ENV=production

======================================================================
 8.4 定期実行処理の設定
======================================================================

cronによる定期実行処理を設定します。

  $ whenever -w --set 'environment=production'

定期実行処理の内容を確認します。

  $ crontab -e

  ※以下のコメントで囲まれた部分が設定内容となります。
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  # Begin Whenever generated tasks ...
  (この部分に定期実行処理が設定されます)
  # End Whenever generated tasks ...
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

======================================================================
 8.5 delayed_job の起動
======================================================================

delayed_jobを自動起動に設定します。

  $ su -
  # cp /var/share/jorurigw/config/samples/delayed_job /etc/init.d/
  # chmod +x /etc/init.d/delayed_job
  # /sbin/chkconfig --add delayed_job
  # /sbin/chkconfig delayed_job on

delayed_jobを起動します。

  # /etc/init.d/delayed_job start

======================================================================
 8.6 VirtualHost の反映
======================================================================

Apacheに設定を追加します。

  # vi /etc/httpd/conf.d/vhosts.conf
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  NameVirtualHost *:80

  <VirtualHost *:80>
      ServerName default
      DocumentRoot /var/share/jorurigw/public
      RackEnv production
      PassengerHighPerformance on
  </VirtualHost>
  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Apache を再起動します。

  # /sbin/service httpd configtest
  # /sbin/service httpd restart


以上でJoruri Gwのインストールが完了です。
